// Function Parameters
/*
#include <iostream>
#include <string>
#include <vector>

using namespace std;

void pass_by_value1(int num) ;
void pass_by_value2(string s) ;
void pass_by_value3(vector<string> v) ;
void print_vector(vector<string> v) ;

void pass_by_value1(int num) {
    num = 1000;
}

void pass_by_value2(string s) {
    s = "Changed" ;
}

void pass_by_value3(vector<string> v) {
  v.clear(); // delete all vector element   
}

void print_vector(vector<string> v) {
    for(auto s : v)
        cout << s << " " ;
        cout << endl;
}

int main() {
  int num {10} ;
  int another_num {20} ;
  
  cout << "num before calling pass by value 1 : " << num << endl;
  pass_by_value1(num);
  cout << "num after calling pass by value 1 " << num << endl;

  cout << "num before calling pass by value 1 : " << another_num << endl;
  pass_by_value1(another_num) ;
  cout << "another num after calling pass by value 1 :" << another_num << endl;


return 0;
}
*/

// default arguement 
/*
#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

double calc_cost( double base_cost , double tax_cost = 0.06 , double shipping = 4.25 ) ;

double calc_cost( double base_cost , double tax_cost , double shipping ) {
    return base_cost += (base_cost*tax_cost) + shipping ;
}

int main() {
    double cost {0};
    
    cost = calc_cost(100.0,0.80,4.25) ;
    cout << "cost is : " << cost << endl; // default arg. not used 
    
    cost = calc_cost(100.0,0.80);
    cout << "cost is : " << cost << endl; // default shipping is used 
    
    cost = calc_cost(100.0);
    cout << "cost is : " << cost << endl; // default shipping and tax rate  is used 
    
    return 0;
}
*/

//cout << "-------------------" << endl;

/*
#include <iostream>
#include <string>

using namespace std ;

void greeting(string name , string prefix = "Mr " , string suffix = ".") ;

void greeting (string name,string prefix,string suffix) {
    cout << "Hello " << prefix + name + suffix << endl;
} 

int main(){
    greeting("Lakshya","Dr " , " ");
    greeting("lakshya","Prof ") ;
    greeting("lakshya choudhary");
    
    return 0;
}
*/

//cout << "----------------------" << endl;


// function overloading 

/*
#include <iostream>
#include <string>
#include <vector>

using namespace std;

void display(int);
void display(double);
void display(string);
void display(string , string);
void display(vector<string>);

void display(int num) {
    cout << "display num : " << num << endl; 
} 

void display(double num) {
     cout << "display double : " << num << endl; 
} 

void display(string s) {
     cout << "display string s  : " << s << endl; 
} 

void display(string s , string t ) {
     cout << "display 2 string s and t  : " << s << " and " << t  << endl; 
} 

void display(vector <string> v ) {
     cout << "display vector of string v  : " ;
        for(auto s : v)
          cout << s ;
     cout << endl; 
} 

int main() {
    
    display(10);
    display(20.00);
    display("lakshya");
    display("lakshya" , "choudhary");
    vector<string> x {"Mr. " , "LAKSHYA " , "CHOUDHARY"} ;
    display (x) ;
    
    return 0;
}
*/

//cout << "---------------------------------------------" << endl;

//passing array to function
/*
#include <iostream>

using namespace std;

void print_array(int arr[] , size_t size);
void set_array(int arr[] , size_t size, int value);

void print_array(int arr[] , size_t size){
    for(size_t i{0} ; i < size ; ++i)
       cout << arr[i] << endl;
}
void set_array(int arr[] , size_t size, int value){
    for(size_t i{0} ; i < size ; ++i)
        arr[i] = value;
}

int main() {
    int my_score[]{1,2,3,4,5,6,7,8,9,0};
    print_array(my_score , 10);
    set_array(my_score, 10, 100);
    print_array(my_score,10);
    
    return 0;
}
*/

//cout << "----------------------------" << endl;

//pass by refrence
/*
#include <iostream>
#include <string>
#include <vector>

using namespace std;

void pass_by_ref1(int &num);
void pass_by_ref2(string &s);
void pass_by_ref3(vector <string> &v);
void print_vector(const vector <string> &v);

int main() {
    int num{10};
    int another_num{20};
    
    cout << "num before calling pass_by_ref1 : " <<  num << endl;
    pass_by_ref1(num);
    cout << "num after calling pass_by_ref1 : " << num << endl;
    
    cout << "another_num before calling pass_by_ref1 : " <<  another_num << endl;
    pass_by_ref1(another_num);
    cout << "another_num after calling pass_by_ref1 : " << another_num << endl;
    
    string name("lakshya");
    cout << "string s before calling pass_by_ref1 : " << name << endl;
    pass_by_ref2(name);
    cout << "string s after calling pass_by_ref1 : " << name << endl;
    
    vector <string> name2{"lakshya","choudhary"};
    cout << "string s before calling :  " ;
    print_vector(name2);
    pass_by_ref3(name2);
    print_vector(name2);
 return 0;   
}   
void pass_by_ref1(int &num) {
    num = 1000;
}
void pass_by_ref2(string &s){
    s = "Changed";
}
void pass_by_ref3(vector <string> &v){
    v.clear();
}
void print_vector(const vector <string> &v){
    for(auto s : v )
        cout << s << " " ;
}

*/

//cout << "------------------------" << endl;

// variable
/*
#include <iostream>

using namespace std;

void local_example();
void global_example();
void static_local_example();

int num{300}; //global variable - declared outside any class or function 

void global_example() {
    cout << "\nGlobal num is : " << num << " in global_example - start " << endl;
    num*=2;
    cout << "Global num is " << num << " in global_example " << endl ;
}
    
void local_example(int x ) {
    int num{1000}; // local to local example
    cout << "\nlocal num is : " << num << "in local_example - start " << endl; 
    num = x ;
    cout << "local num is : " << num << "in local_example - end" << endl;
}
  
void static_local_example() {
   static int num {5000}; // local to static_local_example - retain it value b/w calls  
   cout << "\nlocal static num is " << num << " in static_local_example - start " << endl;
   num += 1000;
   cout << "local static num is : " << num << "in static_local_example - endl;" << endl;
}
    
int main() {
    int num{1000};
    int num1{5000};
    
    cout << "num in main block = " <<  num << endl;
{
 int num{3000};
  cout << "num in inner block is = " << num << endl;
  cout << "num1 in inner block is = " << num1 << endl;        
}    
 cout << "num in outer block is = " << num << endl;
 
 local_example(10);
 local_example(20);
 global_example();
 static_local_example();
 static_local_example();
    
    return 0;
}
*/

//cout << "----------------------------------" << endl;

//function call
/*

#include <iostream>

using namespace std;

func2(int &x , int &y , int &z ){
    x += y+z ;
    return x;
}

int func1(int a , int b) {
    int result{};
    
    result = a+b ;
    func2(result,a,b);
    return result ;
}

int main() {
    int x{10};
    int y{20};
    int z{};
    
    z = func1(x,y);
    cout << z << endl;
    
    return 0;
}
*/

//cout << "-------------------------------------" << endl;


// Recursive function

//fibonacci number 
/*
#include <iostream>

unsigned long long fibonacci(unsigned long long n);

unsigned long long fibonacci(unsigned long long n) {
    if( n <= 1) 
      return n  ;
    return fibonacci(n-1) + fibonacci(n-2);
}
using namespace std;

int main() {
    cout << fibonacci(5) << endl;
    cout << fibonacci(30) << endl;
    cout << fibonacci(40) << endl;
    cout << fibonacci(19) << endl;
    return 0;
}
*/

//cout << "--------------------------" << endl;

//recursion - factorial
/*
#include <iostream>

using namespace std;

unsigned long long factorial(unsigned long long n );

unsigned long long factorial(unsigned long long n) {
    if (n ==0 )
        return 1;
        
    return n*factorial(n-1);
}


int main() {
    cout << factorial(3) << endl;
    cout << factorial(8) << endl;
    cout << factorial(12) << endl;
    cout << factorial(20) << endl;
    return 0;
}
*/

//cout << "--------------------------------" << endl;

/*
#include <iostream>

using namespace std;

void func(int x , int y , int z ) {
    x=y+z;
    y=10;
    x=20;
}

int main() {
    
    int a = 10 , b = 20 , c = 30 ;
    func(a,b,c);
    cout << a << " " << b << " " << c << endl; 
     return 0;
}
*/